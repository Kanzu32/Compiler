PROG CMD ASSIGNS ASSIGN IDS I EXPR CALC FORCOND INNER FIRST COND CALC ANY N
; + - * / >= <= != > < = == , ( ) : if then else for to do while not begin end program var dim readln output and end. or let BOOL ID TYPE NUM
PROG : program var ASSIGNS begin CMD end.
CMD : EXPR ; CMD | EXPR ;
ASSIGNS : ASSIGN ; ASSIGNS | ASSIGN ;
ASSIGN : dim IDS : TYPE
IDS : IDS , I | I
I : ID
EXPR : let ID = CALC | ID = CALC | let ID = I | ID = I | readln ( IDS ) | output ( IDS ) | if COND then begin CMD end | if COND then begin CMD end else begin CMD end | while COND do begin CMD end | for FORCOND do begin CMD end
CALC : ANY + ANY | ANY - ANY | ANY * ANY | ANY / ANY | ANY + ID | ANY - ID | ANY * ID | ANY / ID | ID + ANY | ID - ANY | ID * ANY | ID / ANY | ID + ID | ID - ID | ID * ID | ID / ID
FORCOND : ID = ( INNER )
INNER : FIRST , N | FIRST , I
FIRST : ANY , ANY | CALC , ANY | CALC , CALC | ANY , CALC | I , ANY | I , CALC | I , I | ANY , I | CALC , I
COND : ANY == ANY | ANY != ANY | ANY < ANY | ANY <= ANY | ANY > ANY | ANY >= ANY | ANY and ANY | ANY or ANY | not ANY | not ID | ANY == ID | ANY != ID | ANY < ID | ANY <= ID | ANY > ID | ANY >= ID | ANY and ID | ANY or ID | ID == ANY | ID != ANY | ID < ANY | ID <= ANY | ID > ANY | ID >= ANY | ID and ANY | ID or ANY | ID == ID | ID != ID | ID < ID | ID <= ID | ID > ID | ID >= ID | ID and ID | ID or ID
CALC : ANY + ANY | ANY - ANY | ANY * ANY | ANY / ANY | ANY + ID | ANY - ID | ANY * ID | ANY / ID | ID + ANY | ID - ANY | ID * ANY | ID / ANY | ID + ID | ID - ID | ID * ID | ID / ID
ANY : N | BOOL
N : NUM